(function(global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
        typeof define === 'function' && define.amd ? define(factory) :
        (global.g = factory());
}(this, (
    function() {
    'use strict';

    // 注册树节点矢量图
    var s = ht.Default.setImage;

    s('tree.icon1', {
        "width": 16,
        "height": 16,
        "comps": [{
            "type": "shape",
            "background": "#231815",
            "shadowColor": "#1ABC9C",
            "points": [7.99427, 3.36181, 9.02491, 3.36181, 9.86465, 4.20155, 9.86465, 5.22072, 9.86465, 6.25515, 9.02491, 7.09489, 7.99427, 7.09489, 6.96749, 7.09489, 6.12775, 6.25515, 6.12775, 5.22072, 6.12775, 4.20155, 6.97131, 3.36181, 7.99427, 3.36181, 7.99427, 3.36181, 7.99427, 3.36181, 3.93293, 7.03383, 3.93293, 7.03383, 3.68865, 6.47653, 3.54743, 5.86961, 3.54743, 5.22455, 3.54743, 4.00309, 4.05126, 2.89232, 4.85283, 2.09072, 5.65444, 1.28915, 6.76521, 0.79291, 7.99049, 0.79291, 9.21573, 0.79291, 10.32649, 1.28915, 11.13192, 2.09072, 11.93349, 2.89232, 12.42972, 4.00687, 12.42972, 5.22455, 12.42972, 5.87343, 12.29228, 6.47653, 12.04801, 7.03383, 13.59773, 7.03383, 13.7733, 7.03383, 13.92599, 7.16741, 13.94127, 7.33916, 15.32302, 14.59157, 15.36119, 14.78243, 15.23143, 14.95422, 15.04439, 14.99622, 15.02529, 14.99622, 15.0024, 15, 14.98712, 15, 0.99382, 15, 0.79531, 15, 0.63881, 14.84353, 0.63881, 14.64885, 0.63881, 14.61832, 0.64263, 14.59157, 0.65027, 14.54962, 2.03206, 7.31245, 2.07023, 7.14834, 2.21527, 7.03001, 2.37557, 7.03001, 3.93293, 7.03001, 3.93293, 7.03383, 3.93293, 7.03383, 4.32229, 7.73617, 4.32229, 7.73617, 2.99199, 7.73617, 1.76, 14, 14.26, 14, 12.98415, 7.73617, 11.67011, 7.73617, 11.59376, 7.84304, 11.07846, 8.54538, 10.36084, 9.08739, 9.54403, 9.38894, 8.46379, 10.79361, 8.26529, 11.04935, 7.90268, 11.09899, 7.65076, 10.90813, 7.60495, 10.86996, 7.56678, 10.82797, 7.54389, 10.79361, 6.46747, 9.38894, 5.63916, 9.08739, 4.92154, 8.54538, 4.40624, 7.84304, 4.32229, 7.73617, 4.32229, 7.73617, 4.32229, 7.73617, 10.31507, 2.90757, 10.31507, 2.90757, 9.7196, 2.3121, 8.89511, 1.94567, 7.99427, 1.94567, 7.08965, 1.94567, 6.26897, 2.3121, 5.67351, 2.90757, 5.08186, 3.49921, 4.70779, 4.32371, 4.70779, 5.22072, 4.70779, 5.94977, 4.94446, 6.61012, 5.34142, 7.15595, 5.73839, 7.70181, 6.31479, 8.13313, 6.97895, 8.34688, 7.08965, 8.38123, 7.19652, 8.44993, 7.27286, 8.5492, 7.99427, 9.48435, 8.71189, 8.5492, 8.71953, 8.5492, 8.78059, 8.45757, 8.87986, 8.38505, 8.99816, 8.3507, 9.66997, 8.14077, 10.24637, 7.70181, 10.64715, 7.15595, 11.04029, 6.61012, 11.27314, 5.94977, 11.27314, 5.22072, 11.26932, 4.32371, 10.90289, 3.49921, 10.31507, 2.90757, 10.31507, 2.90757, 10.31507, 2.90757, 7.99427, 4.0565, 7.99427, 4.0565, 7.35303, 4.0565, 6.82244, 4.58327, 6.82244, 5.22455, 6.82244, 5.87343, 7.35303, 6.40019, 7.99427, 6.40019, 8.64319, 6.40019, 9.15849, 5.87343, 9.15849, 5.22455, 9.16231, 4.58709, 8.63555, 4.0565, 7.99427, 4.0565, 7.99427, 4.0565, 7.99427, 4.0565],
            "segments": [1, 4, 4, 4, 4, 2, 2, 1, 2, 4, 4, 4, 4, 4, 4, 2, 4, 2, 4, 4, 2, 4, 4, 2, 4, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 4, 2, 4, 4, 2, 4, 2, 2, 2, 1, 2, 4, 4, 4, 4, 4, 4, 2, 2, 2, 4, 4, 4, 4, 2, 2, 1, 2, 4, 4, 4, 4, 2, 2]
        }]
    });
    s('tree.icon3', {
        "width": 16,
        "height": 16,
        "comps": [{
            "type": "shape",
            "background": "#231815",
            "shadowColor": "#1ABC9C",
            "points": [12.42266, 8.84948, 12.42266, 8.51451, 12.69847, 8.23606, 13.03419, 8.23606, 13.37798, 8.23606, 13.64577, 8.51047, 13.64577, 8.84948, 13.64577, 14.8785, 13.64577, 15.22958, 13.37798, 15.5, 13.03419, 15.5, 13.01824, 15.5, 2.96976, 15.5, 2.63002, 15.5, 2.35823, 15.22958, 2.35823, 14.8785, 2.35823, 14.86642, 2.35823, 8.84948, 2.35823, 8.51451, 2.63002, 8.23606, 2.96976, 8.23606, 3.3095, 8.23606, 3.58129, 8.51047, 3.58129, 8.84948, 3.58129, 14.26511, 5.54384, 14.26511, 5.54384, 8.18762, 5.54384, 7.9778, 5.71169, 7.81233, 5.91154, 7.81233, 5.91955, 7.81233, 10.09241, 7.81233, 10.30026, 7.81233, 10.46415, 7.9778, 10.46415, 8.18762, 10.46415, 8.1957, 10.46415, 14.26511, 12.42266, 14.26511, 12.42266, 8.84948, 12.42266, 8.84948, 12.42266, 8.84948, 6.27529, 14.26511, 6.27529, 14.26511, 9.73271, 14.26511, 9.73271, 8.55083, 6.27529, 8.55083, 6.27529, 14.26511, 6.27529, 14.26511, 6.27529, 14.26511, 1.11115, 9.01086, 1.11115, 9.01086, 0.86733, 9.26512, 0.48761, 9.26512, 0.23983, 9.01086, 0, 8.78084, 0, 8.38133, 0.23983, 8.14327, 7.5703, 0.75421, 7.81413, 0.5, 8.19383, 0.5, 8.43766, 0.75421, 8.44166, 0.76229, 15.76417, 8.14327, 16, 8.38133, 16, 8.77681, 15.76417, 9.01086, 15.52034, 9.26512, 15.13263, 9.26512, 14.8928, 9.01086, 8.00198, 2.05366, 1.11115, 9.01086, 1.11115, 9.01086, 1.11115, 9.01086],
            "segments": [1, 4, 4, 2, 4, 2, 2, 4, 2, 2, 4, 4, 2, 2, 2, 4, 2, 2, 4, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 4, 4, 2, 4, 2, 2, 4, 4, 2, 2, 2, 2]
        }]
    });
    s('tree.icon6', {
        "width": 16,
        "height": 16,
        "comps": [{
            "type": "shape",
            "background": "#231815",
            "shadowColor": "#1ABC9C",
            "points": [13.32204, 2.99924, 6.50532, 2.99924, 6.24577, 2.99924, 6.02946, 2.77646, 6.02946, 2.49799, 6.02946, 2.21952, 6.24267, 2.00002, 6.50532, 2.00002, 13.79172, 2.00002, 14.05437, 2.00002, 14.2645, 2.21952, 14.2645, 2.49799, 14.2645, 2.51111, 14.2645, 14.49873, 14.2645, 14.78048, 14.05437, 14.99998, 13.79172, 14.99998, 13.78244, 14.99998, 2.47588, 14.99998, 2.21014, 14.99998, 2.00002, 14.78048, 2.00002, 14.49873, 2.00002, 14.48565, 2.00002, 2.49799, 2.00002, 2.21952, 2.21014, 2.00002, 2.47588, 2.00002, 2.48823, 2.00002, 4.10743, 2.00002, 4.36392, 2.00002, 4.58329, 2.21952, 4.58329, 2.49799, 4.58329, 2.77646, 4.36392, 2.99924, 4.10743, 2.99924, 2.94247, 2.99924, 2.94247, 6.69482, 4.49062, 6.69482, 4.6451, 6.69482, 4.7687, 6.82587, 4.7687, 6.99621, 4.7687, 7.16003, 4.6451, 7.29764, 4.49062, 7.29764, 2.94247, 7.29764, 2.94247, 14.00076, 7.8495, 14.00076, 7.8495, 7.29764, 6.30448, 7.29764, 6.14688, 7.29764, 6.02327, 7.16003, 6.02327, 6.99621, 6.02327, 6.82587, 6.14688, 6.69482, 6.30448, 6.69482, 8.11218, 6.69482, 8.13071, 6.69482, 8.15233, 6.69482, 9.96003, 6.69482, 10.11454, 6.69482, 10.23815, 6.82587, 10.23815, 6.99621, 10.23815, 7.16003, 10.11454, 7.29764, 9.96003, 7.29764, 8.41501, 7.29764, 8.41501, 14.00076, 13.32204, 14.00076, 13.32204, 7.29764, 11.77699, 7.29764, 11.62248, 7.29764, 11.49581, 7.16003, 11.49581, 6.99621, 11.49581, 6.82587, 11.62248, 6.69482, 11.77699, 6.69482, 13.32204, 6.69482],
            "segments": [1, 2, 4, 4, 2, 4, 2, 2, 4, 2, 2, 4, 2, 2, 4, 2, 2, 4, 4, 2, 2, 2, 4, 4, 2, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 2, 4, 4, 2]
        }]
    });
    s('tree.icon7', {
        "width": 16,
        "height": 16,
        "comps": [{
            "type": "shape",
            "background": "#231815",
            "shadowColor": "#1ABC9C",
            "points": [12.5208, 9.29892, 14.34309, 10.29658, 14.59294, 10.4264, 14.68292, 10.74759, 14.55632, 11.0004, 14.503, 11.09607, 14.4297, 11.17466, 14.34309, 11.21567, 8.23985, 14.57759, 8.08327, 14.65961, 7.90339, 14.65619, 7.76012, 14.57759, 1.65688, 11.21567, 1.40703, 11.08581, 1.31705, 10.76465, 1.44368, 10.50842, 1.49363, 10.41618, 1.57027, 10.34442, 1.65688, 10.29658, 3.47587, 9.29892, 1.65688, 8.29104, 1.40703, 8.15437, 1.31705, 7.84003, 1.44368, 7.58037, 1.49363, 7.49155, 1.57027, 7.42664, 1.65688, 7.37198, 3.47587, 6.37091, 1.65688, 5.363, 1.40703, 5.22975, 1.31705, 4.91202, 1.44368, 4.66601, 1.49363, 4.57035, 1.57027, 4.49517, 1.65688, 4.44736, 7.76012, 1.08198, 7.91336, 1, 8.09328, 1, 8.23985, 1.08198, 14.34309, 4.44736, 14.59294, 4.58403, 14.68292, 4.89834, 14.55632, 5.15119, 14.503, 5.24343, 14.4297, 5.31518, 14.34309, 5.363, 12.5208, 6.37091, 14.34309, 7.37198, 14.59294, 7.51204, 14.68292, 7.81954, 14.55632, 8.07578, 14.503, 8.16805, 14.4297, 8.24319, 14.34309, 8.29104, 12.5208, 9.29892, 12.5208, 9.29892, 12.5208, 9.29892, 13.03384, 10.75439, 13.03384, 10.75439, 11.45473, 9.88318, 8.24318, 11.64955, 8.18989, 11.68371, 8.13323, 11.69739, 8.07994, 11.70423, 8.06993, 11.70765, 8.02331, 11.70765, 8.01331, 11.70765, 7.99667, 11.70765, 7.98666, 11.70765, 7.94334, 11.70765, 7.93003, 11.70423, 7.88004, 11.69739, 7.82342, 11.68029, 7.76679, 11.64955, 4.55524, 9.88318, 2.97613, 10.75439, 8.00664, 13.52186, 13.03384, 10.75439, 13.03384, 10.75439, 13.03384, 10.75439, 7.99667, 10.60066, 7.99667, 10.60066, 9.67572, 9.67818, 11.35812, 8.7557, 13.03051, 7.82638, 11.45139, 6.95514, 8.23985, 8.72153, 8.18655, 8.7557, 8.12993, 8.77277, 8.0766, 8.77961, 8.0666, 8.77961, 8.01998, 8.78645, 8.00997, 8.78645, 7.99333, 8.78645, 7.98333, 8.78645, 7.94001, 8.77961, 7.9267, 8.77961, 7.87671, 8.77277, 7.82008, 8.75228, 7.76346, 8.72153, 4.55191, 6.95514, 2.9728, 7.82638, 4.64188, 8.75912, 6.32758, 9.6816, 7.99667, 10.60066, 7.99667, 10.60066, 7.99667, 10.60066, 7.99667, 7.68629, 7.99667, 7.68629, 9.67572, 6.75698, 11.35812, 5.8345, 13.03051, 4.91202, 7.99667, 2.14455, 2.96613, 4.91202, 4.64188, 5.8345, 6.32758, 6.75698, 7.99667, 7.68629, 7.99667, 7.68629, 7.99667, 7.68629],
            "segments": [1, 2, 4, 4, 2, 4, 2, 4, 4, 2, 2, 4, 4, 2, 2, 4, 4, 2, 4, 2, 4, 4, 2, 2, 4, 4, 2, 2, 2, 1, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 1, 2, 4, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 4, 2, 2, 1, 2, 4, 2, 2, 4, 2, 2]
        }]
    });
    s('tree.icon8', {
        "width": 16,
        "height": 16,
        "comps": [{
            "type": "shape",
            "background": "#231815",
            "shadowColor": "#1ABC9C",
            "points": [2.65556, 8.45092, 4.3722, 8.45092, 4.53616, 8.45092, 4.66797, 8.32, 4.66797, 8.15635, 4.66797, 7.9927, 4.53616, 7.85523, 4.3722, 7.85523, 2.65556, 7.85523, 2.48841, 7.85523, 2.36304, 7.9927, 2.36304, 8.15635, 2.36304, 8.32, 2.48841, 8.45092, 2.65556, 8.45092, 2.65556, 8.45092, 2.65556, 8.45092, 2.65556, 7.3512, 2.65556, 7.3512, 4.3722, 7.3512, 4.53616, 7.3512, 4.66797, 7.22028, 4.66797, 7.05666, 4.66797, 6.88646, 4.53616, 6.75554, 4.3722, 6.75554, 2.65556, 6.75554, 2.48841, 6.75554, 2.36304, 6.88646, 2.36304, 7.05666, 2.36304, 7.22028, 2.48841, 7.3512, 2.65556, 7.3512, 2.65556, 7.3512, 2.65556, 7.3512, 14.51136, 3.5219, 14.51136, 3.5219, 10.972, 3.5219, 10.972, 2.50402, 10.972, 2.23239, 10.75018, 2, 10.48012, 2, 5.52306, 2, 5.24982, 2, 5.03444, 2.22911, 5.03444, 2.50402, 5.03444, 3.5219, 1.49508, 3.5219, 1.2218, 3.5219, 1.00002, 3.74774, 1.00002, 4.02593, 1.00002, 13.7825, 1.00002, 14.05413, 1.2218, 14.27997, 1.49508, 14.27997, 5.03444, 14.27997, 5.03444, 14.49598, 5.03444, 14.76765, 5.24982, 15, 5.52306, 15, 10.48012, 15, 10.74696, 15, 10.972, 14.77092, 10.972, 14.49598, 10.972, 14.27997, 14.51136, 14.27997, 14.78138, 14.27997, 14.99998, 14.05741, 14.99998, 13.7825, 14.99998, 4.02593, 14.99998, 3.74774, 14.7846, 3.5219, 14.51136, 3.5219, 14.51136, 3.5219, 14.51136, 3.5219, 5.03766, 13.2752, 5.03766, 13.2752, 1.98692, 13.2752, 1.98692, 4.52016, 5.03766, 4.52016, 5.03766, 13.2752, 5.03766, 13.2752, 5.03766, 13.2752, 9.9915, 13.99523, 9.9915, 13.99523, 6.02137, 13.99523, 6.02137, 3.0015, 9.9915, 3.0015, 9.9915, 13.99523, 9.9915, 13.99523, 9.9915, 13.99523, 14.0163, 13.2752, 14.0163, 13.2752, 10.972, 13.2752, 10.972, 4.52016, 14.0163, 4.52016, 14.0163, 13.2752, 14.0163, 13.2752, 14.0163, 13.2752, 2.65556, 6.25151, 2.65556, 6.25151, 4.3722, 6.25151, 4.53616, 6.25151, 4.66797, 6.12059, 4.66797, 5.95694, 4.66797, 5.79005, 4.53616, 5.65585, 4.3722, 5.65585, 2.65556, 5.65585, 2.48841, 5.65585, 2.36304, 5.79005, 2.36304, 5.95694, 2.36304, 6.12059, 2.48841, 6.25151, 2.65556, 6.25151, 2.65556, 6.25151, 2.65556, 6.25151, 4.28863, 10.80087, 4.28863, 10.80087, 4.08931, 10.59466, 3.81607, 10.4703, 3.51068, 10.4703, 3.20851, 10.4703, 2.93205, 10.59466, 2.73594, 10.80087, 2.53662, 11.0005, 2.41446, 11.27545, 2.41446, 11.58309, 2.41446, 11.88421, 2.527, 12.1624, 2.71345, 12.35551, 2.73594, 12.37186, 2.93205, 12.57807, 3.20529, 12.70243, 3.51068, 12.70243, 3.81285, 12.70243, 4.08931, 12.57807, 4.28863, 12.37186, 4.48796, 12.1722, 4.61333, 11.89729, 4.61333, 11.57981, 4.61333, 11.27872, 4.49439, 11.0136, 4.30791, 10.81067, 4.28863, 10.80087, 4.28863, 10.80087, 4.28863, 10.80087, 3.87074, 11.95292, 3.87074, 11.95292, 3.78392, 12.04131, 3.65214, 12.10674, 3.51068, 12.10674, 3.36925, 12.10674, 3.24387, 12.04456, 3.15386, 11.95292, 3.13777, 11.94312, 3.0542, 11.84821, 3.00275, 11.73036, 3.00275, 11.58637, 3.00275, 11.44562, 3.05742, 11.32125, 3.14743, 11.21978, 3.15386, 11.22633, 3.24387, 11.12814, 3.36603, 11.06596, 3.51068, 11.06596, 3.64892, 11.06596, 3.7807, 11.12487, 3.87074, 11.22633, 3.88358, 11.23289, 3.96715, 11.32452, 4.01861, 11.44562, 4.01861, 11.58309, 4.02183, 11.73036, 3.96715, 11.86128, 3.87074, 11.95292, 3.87074, 11.95292, 3.87074, 11.95292, 11.6342, 7.3512, 11.6342, 7.3512, 13.35407, 7.3512, 13.52124, 7.3512, 13.64983, 7.22028, 13.64983, 7.05666, 13.64983, 6.88646, 13.52124, 6.75554, 13.35407, 6.75554, 11.6342, 6.75554, 11.46706, 6.75554, 11.33846, 6.88646, 11.33846, 7.05666, 11.33846, 7.22028, 11.46706, 7.3512, 11.6342, 7.3512, 11.6342, 7.3512, 11.6342, 7.3512, 11.6342, 8.45092, 11.6342, 8.45092, 13.35407, 8.45092, 13.52124, 8.45092, 13.64983, 8.32, 13.64983, 8.15635, 13.64983, 7.9927, 13.52124, 7.85523, 13.35407, 7.85523, 11.6342, 7.85523, 11.46706, 7.85523, 11.33846, 7.9927, 11.33846, 8.15635, 11.33846, 8.32, 11.46706, 8.45092, 11.6342, 8.45092, 11.6342, 8.45092, 11.6342, 8.45092, 11.6342, 6.25151, 11.6342, 6.25151, 13.35407, 6.25151, 13.52124, 6.25151, 13.64983, 6.12059, 13.64983, 5.95694, 13.64983, 5.79005, 13.52124, 5.65585, 13.35407, 5.65585, 11.6342, 5.65585, 11.46706, 5.65585, 11.33846, 5.79005, 11.33846, 5.95694, 11.33846, 6.12059, 11.46706, 6.25151, 11.6342, 6.25151, 11.6342, 6.25151, 11.6342, 6.25151, 6.94719, 7.87816, 6.94719, 7.87816, 9.06246, 7.87816, 9.22642, 7.87816, 9.35819, 7.74724, 9.35819, 7.57704, 9.35819, 7.41338, 9.22642, 7.27594, 9.06246, 7.27594, 6.94719, 7.27594, 6.78002, 7.27594, 6.65143, 7.41338, 6.65143, 7.57704, 6.65143, 7.74724, 6.78002, 7.87816, 6.94719, 7.87816, 6.94719, 7.87816, 6.94719, 7.87816, 13.27371, 10.80087, 13.27371, 10.80087, 13.07439, 10.59466, 12.80115, 10.4703, 12.49254, 10.4703, 12.19355, 10.4703, 11.91388, 10.59466, 11.72102, 10.80087, 11.52492, 11.0005, 11.39954, 11.27545, 11.39954, 11.58309, 11.39954, 11.88421, 11.51848, 12.1624, 11.70493, 12.35551, 11.7178, 12.37186, 11.91388, 12.57807, 12.19037, 12.70243, 12.48932, 12.70243, 12.79471, 12.70243, 13.07117, 12.57807, 13.27049, 12.37186, 13.4666, 12.1722, 13.59197, 11.89729, 13.59197, 11.57981, 13.59197, 11.27872, 13.47944, 11.0136, 13.28655, 10.81067, 13.27371, 10.80087, 13.27371, 10.80087, 13.27371, 10.80087, 12.85579, 11.95292, 12.85579, 11.95292, 12.76578, 12.04131, 12.64041, 12.10674, 12.49254, 12.10674, 12.36073, 12.10674, 12.22892, 12.04456, 12.13569, 11.95292, 12.12285, 11.94312, 12.03925, 11.84821, 11.98461, 11.73036, 11.98461, 11.58637, 11.98461, 11.44562, 12.03925, 11.32125, 12.13891, 11.21978, 12.13891, 11.22633, 12.22892, 11.12814, 12.36073, 11.06596, 12.49576, 11.06596, 12.64363, 11.06596, 12.769, 11.12487, 12.85901, 11.22633, 12.87188, 11.23289, 12.95545, 11.32452, 13.00688, 11.44562, 13.00688, 11.58309, 13.00366, 11.73036, 12.95223, 11.86128, 12.85579, 11.95292, 12.85579, 11.95292, 12.85579, 11.95292, 6.94719, 5.178, 6.94719, 5.178, 9.06246, 5.178, 9.22642, 5.178, 9.35819, 5.04708, 9.35819, 4.88016, 9.35819, 4.71323, 9.22642, 4.58234, 9.06246, 4.58234, 6.94719, 4.58234, 6.78002, 4.58234, 6.65143, 4.71323, 6.65143, 4.88016, 6.65143, 5.04708, 6.78002, 5.178, 6.94719, 5.178, 6.94719, 5.178, 6.94719, 5.178, 6.94719, 6.53298, 6.94719, 6.53298, 9.06246, 6.53298, 9.22642, 6.53298, 9.35819, 6.39551, 9.35819, 6.23189, 9.35819, 6.06496, 9.22642, 5.93732, 9.06246, 5.93732, 6.94719, 5.93732, 6.78002, 5.93732, 6.65143, 6.06496, 6.65143, 6.23189, 6.65143, 6.39226, 6.78002, 6.53298, 6.94719, 6.53298, 6.94719, 6.53298, 6.94719, 6.53298, 8.92421, 10.89579, 8.92421, 10.89579, 8.90816, 10.88596, 8.67347, 10.64378, 8.36164, 10.49975, 8.00483, 10.49975, 7.66085, 10.49975, 7.34259, 10.63722, 7.11434, 10.86306, 7.1015, 10.88596, 6.87003, 11.11179, 6.72538, 11.44234, 6.72538, 11.80892, 6.72538, 12.1722, 6.87324, 12.49622, 7.1015, 12.72534, 7.33294, 12.96752, 7.6512, 13.11155, 8.00805, 13.11155, 8.36164, 13.11155, 8.67668, 12.96424, 8.91137, 12.72534, 8.91137, 12.72534, 9.14603, 12.4995, 9.29071, 12.1722, 9.29071, 11.80892, 9.2875, 11.45217, 9.14925, 11.1347, 8.92421, 10.89579, 8.92421, 10.89579, 8.92421, 10.89579, 8.49345, 12.2966, 8.49345, 12.2966, 8.36808, 12.42749, 8.1945, 12.50933, 8.00483, 12.50933, 7.80872, 12.50933, 7.63514, 12.42749, 7.5162, 12.30312, 7.50977, 12.30312, 7.5162, 12.2966, 7.38761, 12.17548, 7.30723, 11.99875, 7.30723, 11.80565, 7.30723, 11.60599, 7.38761, 11.42927, 7.5162, 11.30818, 7.52261, 11.29507, 7.64798, 11.1707, 7.81838, 11.09541, 8.00161, 11.09541, 8.19771, 11.09541, 8.36486, 11.17725, 8.49023, 11.30818, 8.5031, 11.3147, 8.62204, 11.4391, 8.69277, 11.60927, 8.69277, 11.80565, 8.69599, 11.99875, 8.61882, 12.17548, 8.49345, 12.2966, 8.49345, 12.2966, 8.49345, 12.2966],
            "segments": [1, 2, 4, 4, 2, 4, 4, 2, 2, 1, 2, 2, 4, 4, 2, 4, 4, 2, 2, 1, 2, 2, 2, 4, 2, 4, 2, 2, 4, 2, 4, 2, 2, 4, 2, 4, 2, 2, 4, 2, 4, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 4, 4, 2, 4, 4, 2, 2, 1, 2, 4, 4, 4, 4, 2, 4, 4, 4, 4, 2, 2, 2, 1, 2, 4, 4, 2, 4, 4, 2, 4, 4, 2, 4, 4, 2, 2, 1, 2, 2, 4, 4, 2, 4, 4, 2, 2, 1, 2, 2, 4, 4, 2, 4, 4, 2, 2, 1, 2, 2, 4, 4, 2, 4, 4, 2, 2, 1, 2, 2, 4, 4, 2, 4, 4, 2, 2, 1, 2, 4, 4, 4, 4, 2, 4, 4, 4, 4, 2, 2, 2, 1, 2, 4, 4, 2, 4, 4, 2, 4, 4, 2, 4, 4, 2, 2, 1, 2, 2, 4, 4, 2, 4, 4, 2, 2, 1, 2, 2, 4, 4, 2, 4, 4, 2, 2, 1, 2, 2, 4, 4, 2, 4, 4, 4, 4, 2, 4, 4, 2, 2, 1, 2, 4, 4, 2, 2, 4, 4, 2, 4, 4, 2, 4, 4, 2, 2]
        }]
    });
    s('tree.icon18', {
        "width": 16,
        "height": 16,
        "comps": [{
            "type": "shape",
            "background": "#231815",
            "shadowColor": "#1ABC9C",
            "points": [3.84623, 1.14709, 3.85667, 1.14709, 12.15377, 1.14709, 12.44672, 1.14709, 12.69086, 1.38079, 12.69086, 1.68422, 12.69086, 1.69117, 12.69086, 14.46986, 12.69086, 14.75586, 12.45021, 15, 12.15377, 15, 12.1398, 15, 3.84623, 15, 3.55674, 15, 3.30911, 14.75935, 3.30911, 14.46986, 3.30911, 14.45593, 3.30911, 1.68422, 3.30911, 1.38079, 3.55674, 1.14709, 3.84623, 1.14709, 3.84623, 1.14709, 3.84623, 1.14709, 6.25965, 11.9518, 6.25965, 11.9518, 6.5526, 11.9518, 6.79675, 12.18896, 6.79675, 12.4854, 6.79675, 12.7749, 6.55609, 13.02249, 6.25965, 13.02249, 5.96321, 13.02249, 5.72954, 12.77835, 5.72954, 12.4854, 5.73304, 12.18896, 5.9667, 11.9518, 6.25965, 11.9518, 6.25965, 11.9518, 6.25965, 11.9518, 6.25965, 9.55929, 6.25965, 9.55929, 6.5003, 9.55929, 6.72004, 9.65694, 6.88047, 9.80689, 7.03391, 9.97084, 7.13505, 10.19403, 7.13505, 10.4277, 7.13505, 10.66835, 7.0374, 10.88806, 6.88047, 11.04851, 6.7235, 11.20545, 6.5038, 11.30659, 6.25965, 11.30659, 6.019, 11.30659, 5.7993, 11.20894, 5.64582, 11.04851, 5.48191, 10.88806, 5.38426, 10.67185, 5.38426, 10.4277, 5.38426, 10.19403, 5.48191, 9.97084, 5.64582, 9.80689, 5.7993, 9.65694, 6.019, 9.55929, 6.25965, 9.55929, 6.25965, 9.55929, 6.25965, 9.55929, 6.42706, 10.2603, 6.42706, 10.2603, 6.3852, 10.22193, 6.32592, 10.19054, 6.25965, 10.19054, 6.19688, 10.19054, 6.13411, 10.22193, 6.09923, 10.2603, 6.05039, 10.30565, 6.02249, 10.35795, 6.02249, 10.4277, 6.02249, 10.49746, 6.05039, 10.55674, 6.09923, 10.59511, 6.13411, 10.63348, 6.19339, 10.66137, 6.25965, 10.66137, 6.32243, 10.66137, 6.3852, 10.62999, 6.42706, 10.59511, 6.46892, 10.55674, 6.49332, 10.49746, 6.49332, 10.4277, 6.49681, 10.36144, 6.46892, 10.30565, 6.42706, 10.2603, 6.42706, 10.2603, 6.42706, 10.2603, 5.7086, 8.10844, 5.7086, 8.10844, 5.53424, 8.10844, 5.38775, 7.95846, 5.38775, 7.78407, 5.38775, 7.60968, 5.53424, 7.46672, 5.7086, 7.46672, 10.29137, 7.46672, 10.46576, 7.46672, 10.61221, 7.60968, 10.61221, 7.78407, 10.61221, 7.95846, 10.46576, 8.10844, 10.29137, 8.10844, 5.7086, 8.10844, 5.7086, 8.10844, 5.7086, 8.10844, 5.7086, 5.98793, 5.7086, 5.98793, 5.53424, 5.98793, 5.38775, 5.84842, 5.38775, 5.66709, 5.38775, 5.4927, 5.53424, 5.34621, 5.7086, 5.34621, 10.29137, 5.34621, 10.46576, 5.34621, 10.61221, 5.4927, 10.61221, 5.66709, 10.61221, 5.84842, 10.46576, 5.98793, 10.29137, 5.98793, 5.7086, 5.98793, 5.7086, 5.98793, 5.7086, 5.98793, 5.7086, 3.86746, 5.7086, 3.86746, 5.53424, 3.86746, 5.38775, 3.72446, 5.38775, 3.55007, 5.38775, 3.36874, 5.53424, 3.23272, 5.7086, 3.23272, 10.29137, 3.23272, 10.46576, 3.23272, 10.61221, 3.36874, 10.61221, 3.55007, 10.61221, 3.72446, 10.46576, 3.86746, 10.29137, 3.86746, 5.7086, 3.86746, 5.7086, 3.86746, 5.7086, 3.86746, 11.62711, 2.21433, 11.62711, 2.21433, 4.37983, 2.21433, 4.37983, 13.93626, 11.62711, 13.93626, 11.62711, 2.21433, 11.62711, 2.21433, 11.62711, 2.21433],
            "segments": [1, 2, 2, 4, 2, 2, 4, 2, 2, 4, 2, 2, 4, 2, 2, 1, 2, 4, 4, 4, 4, 2, 2, 1, 2, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 1, 2, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 1, 2, 4, 4, 2, 4, 4, 2, 2, 2, 1, 2, 4, 4, 2, 4, 4, 2, 2, 2, 1, 2, 4, 4, 2, 4, 4, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2]
        }]
    });
    s('tree.icon', {
        "width": 16,
        "height": 16,
        "comps": [{
            "type": "shape",
            "background": "#231815",
            "shadowColor": "#1ABC9C",
            "points": [3.46955, 11.05503, 3.29365, 11.05503, 3.14941, 11.19924, 3.14941, 11.37866, 3.14941, 13.10945, 3.14941, 13.29239, 3.29365, 13.44015, 3.46955, 13.44015, 3.64897, 13.44015, 3.7967, 13.29239, 3.7967, 13.10945, 3.7967, 11.37866, 3.80022, 11.19924, 3.64897, 11.05503, 3.46955, 11.05503, 3.46955, 11.05503, 3.46955, 11.05503, 14.95191, 10.50624, 14.95191, 10.50624, 14.95191, 10.47458, 14.95191, 10.44993, 14.94486, 10.42179, 13.74177, 3.05887, 13.69603, 2.78095, 13.56587, 2.51007, 13.38293, 2.32364, 13.17537, 2.12313, 12.91858, 1.99998, 12.59844, 1.99998, 3.35697, 1.99998, 3.04035, 1.99998, 2.7519, 2.12662, 2.54082, 2.33417, 2.5373, 2.33417, 2.34031, 2.54173, 2.21719, 2.81613, 2.21015, 3.11165, 1.01407, 10.37256, 1.0035, 10.42179, 0.99998, 10.46049, 0.99998, 10.50624, 0.99998, 13.60901, 1.03868, 14.16481, 1.39753, 14.65733, 1.97446, 14.80509, 1.9815, 14.8121, 1.98499, 14.8121, 1.99907, 14.8121, 2.00259, 14.8121, 2.01668, 14.81562, 2.03073, 14.81914, 2.03073, 14.81914, 2.04482, 14.82266, 2.04482, 14.82266, 2.05887, 14.82266, 2.06943, 14.82618, 2.087, 14.82971, 2.16793, 14.83675, 2.20311, 14.84027, 2.21719, 14.84027, 2.23124, 14.84379, 13.65733, 14.84379, 14.36793, 14.84379, 14.94486, 14.25982, 14.94486, 13.54921, 14.94486, 10.50624, 14.95191, 10.50624, 14.95191, 10.50624, 14.95191, 10.50624, 3.26199, 3.23829, 3.26199, 3.23829, 3.26904, 3.20663, 3.27256, 3.18198, 3.27256, 3.1468, 3.27256, 3.1468, 3.27256, 3.12923, 3.28309, 3.10813, 3.29717, 3.09757, 3.29717, 3.09757, 3.31126, 3.08348, 3.33587, 3.06591, 3.35345, 3.06591, 12.59492, 3.06591, 12.60196, 3.06591, 12.60901, 3.06591, 12.61605, 3.07996, 12.65123, 3.11514, 12.67232, 3.17145, 12.68289, 3.23477, 13.45681, 7.94169, 13.41811, 7.93465, 13.38645, 7.93465, 13.35832, 7.93465, 2.59361, 7.93465, 2.56195, 7.93465, 2.52325, 7.93465, 2.49508, 7.94169, 3.26199, 3.23829, 3.26199, 3.23829, 3.26199, 3.23829, 2.38253, 8.63821, 2.38253, 8.63821, 2.4388, 8.59955, 2.51973, 8.57842, 2.59709, 8.57842, 13.36184, 8.57842, 13.43924, 8.57842, 13.5096, 8.60307, 13.57644, 8.63821, 13.74529, 9.64082, 13.66789, 9.64082, 2.29456, 9.64082, 2.2242, 9.64082, 2.38253, 8.63821, 2.38253, 8.63821, 2.38253, 8.63821, 13.87897, 13.54921, 13.87897, 13.54921, 13.87897, 13.6688, 13.78047, 13.7673, 13.66085, 13.7673, 2.27699, 13.7673, 2.17145, 13.76026, 2.08, 13.6899, 2.06591, 13.57735, 2.06591, 13.57383, 2.06239, 13.57383, 2.06239, 10.92484, 2.06943, 10.80525, 2.16441, 10.71379, 2.28755, 10.71379, 13.66085, 10.71379, 13.72064, 10.71379, 13.77695, 10.73489, 13.81213, 10.77711, 13.81213, 10.77711, 13.81213, 10.77711, 13.85083, 10.81581, 13.87545, 10.86856, 13.87545, 10.92135, 13.87545, 13.54921, 13.87897, 13.54921, 13.87897, 13.54921, 11.75064, 11.1711, 11.75064, 11.1711, 11.15614, 11.1711, 10.67066, 11.65305, 10.67066, 12.24407, 10.67066, 12.83505, 11.15614, 13.32053, 11.75064, 13.32053, 12.33461, 13.32053, 12.82713, 12.83156, 12.82713, 12.24407, 12.82361, 11.65305, 12.33813, 11.1711, 11.75064, 11.1711, 11.75064, 11.1711, 11.75064, 11.1711, 11.75064, 12.66971, 11.75064, 12.66971, 11.5079, 12.66971, 11.31091, 12.47976, 11.31091, 12.24407, 11.31091, 12.00485, 11.50438, 11.81487, 11.75064, 11.81487, 11.98633, 11.81487, 12.17632, 12.00837, 12.17632, 12.24407, 12.17632, 12.47624, 11.98633, 12.66971, 11.75064, 12.66971, 11.75064, 12.66971, 11.75064, 12.66971, 5.84411, 11.05503, 5.84411, 11.05503, 5.66472, 11.05503, 5.52048, 11.19924, 5.52048, 11.37866, 5.52048, 13.10945, 5.52048, 13.29239, 5.66472, 13.44015, 5.84411, 13.44015, 6.02001, 13.44015, 6.16777, 13.29239, 6.16777, 13.10945, 6.16777, 11.37866, 6.17129, 11.19924, 6.02001, 11.05503, 5.84411, 11.05503, 5.84411, 11.05503, 5.84411, 11.05503, 4.66211, 11.05503, 4.66211, 11.05503, 4.48621, 11.05503, 4.34197, 11.19924, 4.34197, 11.37866, 4.34197, 13.10945, 4.34197, 13.29239, 4.48621, 13.44015, 4.66211, 13.44015, 4.83801, 13.44015, 4.98225, 13.29239, 4.98225, 13.10945, 4.98225, 11.37866, 4.98225, 11.19924, 4.83449, 11.05503, 4.66211, 11.05503, 4.66211, 11.05503, 4.66211, 11.05503],
            "segments": [1, 4, 2, 4, 4, 2, 4, 2, 2, 1, 2, 4, 2, 4, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 1, 2, 4, 2, 4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 2, 2, 2, 1, 2, 4, 2, 4, 2, 2, 2, 2, 2, 2, 2, 1, 2, 4, 2, 4, 2, 2, 2, 4, 2, 4, 2, 2, 4, 2, 2, 2, 1, 2, 4, 4, 4, 4, 2, 2, 1, 2, 4, 4, 4, 4, 2, 2, 1, 2, 4, 2, 4, 4, 2, 4, 2, 2, 1, 2, 4, 2, 4, 4, 2, 4, 2, 2]
        }]
    });

    ht.Default.setImage('toolbar.add.rack', {
        "background": "rgb(130,130,130)",
        "width": 16,
        "height": 16,
        "comps": [{
            "type": "shape",
            "borderWidth": 1,
            "borderColor": "rgb(255,255,255)",
            "borderCap": "round",
            "shadowColor": "#1ABC9C",
            "points": [7.55205, 14.52911, 2.45927, 14.52911, 2.45927, 1.52086, 13.49363, 1.52086, 13.49363, 8.43478]
        }, {
            "type": "shape",
            "borderWidth": 1,
            "borderColor": "rgb(255,255,255)",
            "borderCap": "round",
            "shadowColor": "#1ABC9C",
            "points": [8.54249, 12.50305, 14.54249, 12.50305, 11.54249, 12.50305, 11.54249, 9.50305, 11.54249, 15.50305]
        }, {
            "type": "shape",
            "borderWidth": 1,
            "borderColor": "rgb(255,255,255)",
            "borderCap": "round",
            "shadowColor": "#1ABC9C",
            "points": [6.44839, 4.5, 9.50451, 4.5]
        }, {
            "type": "shape",
            "borderWidth": 1,
            "borderColor": "rgb(255,255,255)",
            "borderCap": "round",
            "shadowColor": "#1ABC9C",
            "points": [6.44839, 7.5, 9.50451, 7.5]
        }]
    });
    ht.Default.setImage('toolbar.edit.rack', {
        "background": "rgb(128,128,128)",
        "width": 16,
        "height": 16,
        "comps": [{
            "type": "shape",
            "borderWidth": 1,
            "borderColor": "rgb(255,255,255)",
            "borderCap": "round",
            "shadowColor": "#1ABC9C",
            "points": [4.97735, 14.52911, 2.45927, 14.52911, 2.45927, 1.52086, 13.49363, 1.52086, 13.49363, 3.97983, 13.49363, 13, 13.49363, 14.52911, 12.13999, 14.52911],
            "segments": [1, 2, 2, 2, 2, 1, 2, 2]
        }, {
            "type": "shape",
            "borderWidth": 1,
            "borderColor": "rgb(255,255,255)",
            "borderCap": "round",
            "shadowColor": "#1ABC9C",
            "points": [6.44839, 4.5, 9.50451, 4.5]
        }, {
            "type": "shape",
            "borderWidth": 1,
            "borderColor": "rgb(255,255,255)",
            "borderCap": "round",
            "shadowColor": "#1ABC9C",
            "points": [6.44839, 7.5, 9.50451, 7.5]
        }, {
            "type": "shape",
            "borderWidth": 1,
            "borderColor": "rgb(255,255,255)",
            "borderCap": "round",
            "closePath": true,
            "points": [13, 6, 15, 8, 9, 14.0442, 7, 14, 7, 12, 13, 6, 11.56, 7.56, 13.52, 9.48],
            "segments": [1, 2, 2, 2, 2, 2, 1, 2]
        }]
    });

    ht.Default.setImage('toolbar.delete', {
        "background": "rgb(89,89,89)",
        "width": 16,
        "height": 16,
        "comps": [{
            "type": "shape",
            "borderWidth": 1,
            "borderColor": "rgb(255,255,255)",
            "borderCap": "round",
            "shadowColor": "#1ABC9C",
            "points": [5.5, 5.57173, 5.5, 12.45709]
        }, {
            "type": "shape",
            "borderWidth": 1,
            "borderColor": "rgb(255,255,255)",
            "borderCap": "round",
            "shadowColor": "#1ABC9C",
            "points": [8.05685, 5.57173, 8.05685, 12.45709]
        }, {
            "type": "shape",
            "borderWidth": 1,
            "borderColor": "rgb(255,255,255)",
            "borderCap": "round",
            "shadowColor": "#1ABC9C",
            "points": [10.5, 5.57173, 10.5, 12.45709]
        }, {
            "type": "shape",
            "borderWidth": 1,
            "borderColor": "rgb(255,255,255)",
            "borderCap": "round",
            "shadowColor": "#1ABC9C",
            "points": [1, 3.18902, 15, 3.16996, 5.32652, 3.16021, 6.32652, 1.16021, 9.32652, 1.16021, 10.32652, 3.16021]
        }, {
            "type": "rect",
            "borderWidth": 1,
            "borderColor": "rgb(255,255,255)",
            "shadowColor": "#1ABC9C",
            "rect": [3.33333, 3.18902, 9.33334, 11.65078]
        }]
    });

    var TYPE_SITE = 1;

    var TYPE_BUILDING = 3;


    var TYPE_AREA = 6;
    var TYPE_FLOOR = 7;
    var TYPE_RACK_SPACE = 8;









    var TYPE_RACK = 18;

    var ICON_SIZE = 26;

    var RACK_GAP = 16;

    // 41.6 600
    ht.Default.setImage('rack', {
        "dataBindings": [{
            "attr": "usize",
            "valueType": "PositiveNumber"
        }, {
            "attr": "name",
            "valueType": "String"
        }],
        "width": 240,
        "height": {
            func: function func(data) {
                return data.a('usize') ? data.a('usize') * (U_HEIGHT + U_GAP) + 86 : data._height;
            }
        },
        "fitSize": true,
        "comps": [{
            "type": "components/rack.json",
            "displayName": "rack",
            "rect": [0, 0, 240, 500],
            "usize": {
                "func": "attr@usize",
                "value": 20
            },
            "name": {
                "func": "attr@name",
                "value": "Rack"
            }
        }]
    });
    ht.Default.setImage('rackSelected', {
        "dataBindings": [{
            "attr": "usize",
            "valueType": "PositiveNumber"
        }, {
            "attr": "name",
            "valueType": "String"
        }],
        "width": 240,
        "height": {
            func: function func(data) {
                return data.a('usize') ? data.a('usize') * (U_HEIGHT + U_GAP) + 86 : data._height;
            }
        },
        "fitSize": true,
        "comps": [{
            "type": "components/rackSelected.json",
            "displayName": "rack",
            "rect": [0, 0, 240, 500],
            "usize": {
                "func": "attr@usize",
                "value": 20
            },
            "name": {
                "func": "attr@name",
                "value": "Rack"
            }
        }]
    });
    var HEADER_HEIGHT = 30;
    var U_HEIGHT = 20.8;
    var U_GAP = 2;
    var FOOTER_HEIGHT = 56;
    var DEFAULT_USIZE = 18;
    var treeData = [{
        id: 1,
        name: 'Racks',
        type: 8,
        children: [{
            id: 999,
            name: '1号机柜',
            type: 18,
            usize: 32,
            children: [{ id: 11, name: '交换机', uHeight: 2, uindex: 2, img: './symbols/carrey icon/机房设备/pane-simple.json' }]
        }]
    }];
    var Rack = function Rack(usize, selected) {
        Rack.superClass.constructor.apply(this);
        if (selected) {
            this.setImage('rackSelected');
        } else {
            this.setImage('rack');
        }

        this.setUSize(usize || DEFAULT_USIZE);
    };

    ht.Default.def(Rack, ht.Node, {
        setUSize: function setUSize(size) {
            if (typeof size === 'string') {
                size = parseInt(size);
            }
            this.a('usize', size);
        },
        caluCellRect: function caluCellRect(uindex) {
            var uHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

            var rect = this.getRect(),
                usize = this.a('usize'),
                ri = usize - uindex,
                iheight = U_HEIGHT;
            if (uHeight > 1) {
                iheight = (U_HEIGHT + U_GAP) * (uHeight - 1) + U_HEIGHT;
            }
            return {
                width: rect.width - U_HEIGHT * 2,
                height: iheight,
                x: rect.x + U_HEIGHT + U_GAP / 2,
                y: rect.y + HEADER_HEIGHT + (U_HEIGHT + U_GAP) * (ri - uHeight + 1) + U_GAP / 2
            };
        },
        getCellIndex: function getCellIndex(y) {
            var uheight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

            var rect = this.getRect(),
                usize = this.a('usize'),
                index = null;
            y++;
            if (y < rect.y + HEADER_HEIGHT) {
                index = 0;
            } else if (y > rect.y + rect.height - FOOTER_HEIGHT) {
                index = this.a('usize') - 1;
            } else {
                index = Math.floor((y - rect.y - HEADER_HEIGHT) / (U_HEIGHT + U_GAP));
            }
            return index === null ? -1 : usize - index - uheight + 1;
        },
        getCellRect: function getCellRect(lp, uHeight) {
            var ownRect = this.getRect(),
                rect = {};
            uHeight = uHeight || 1;
            if (ht.Default.containsPoint(ownRect, lp)) {
                rect.width = ownRect.width - U_HEIGHT * 2;
                rect.height = (U_HEIGHT + U_GAP) * uHeight;
                rect.x = ownRect.x + (U_HEIGHT + U_GAP / 2);
                //rect.y = ownRect.y + HEADER_HEIGHT + (U_HEIGHT+U_GAP) * (ri - uHeight + 1) + U_GAP/2
                if (lp.y < ownRect.y + HEADER_HEIGHT) {
                    // in header
                    rect.y = ownRect.y + HEADER_HEIGHT;
                } else if (lp.y > ownRect.y + ownRect.height - FOOTER_HEIGHT) {
                    // in footer
                    rect.y = ownRect.y + ownRect.height - FOOTER_HEIGHT - uHeight * (U_HEIGHT + U_GAP);
                } else {
                    // in rack cell
                    var offset = lp.y - ownRect.y - HEADER_HEIGHT;
                    rect.y = lp.y - offset % (U_HEIGHT + U_GAP);
                    if (uHeight > 1 && Math.floor(offset / (U_HEIGHT + U_GAP)) + uHeight > this.a('usize')) {
                        rect.y -= (Math.floor(offset / (U_HEIGHT + U_GAP)) + uHeight - this.a('usize')) * (U_HEIGHT + U_GAP);
                    }
                    rect.y += U_GAP / 2;
                }
                return rect;
            }
            return null;
        },
        judgeAllow: function judgeAllow(index, uHeight) {
            var unAllow = [],
                matchs = [index];
            this.getChildren().each(function(device) {
                var uh = Math.floor((device.getHeight() + 1) / (U_HEIGHT + U_GAP)),
                    uindex = device.a('uindex');

                unAllow.push(uindex);
                if (uh > 1) {
                    while (--uh) {
                        unAllow.push(++uindex);
                    }
                }
            });
            if (uHeight > 1) {
                while (--uHeight) {
                    matchs.push(++index);
                }
            }
            for (var i = 0; i < matchs.length; i++) {
                if (unAllow.indexOf(matchs[i]) >= 0) {
                    return false;
                }
            }
            return true;
        },
        getFirstAllow: function getFirstAllow(uHeight) {
            var usize = this.a('usize');

            for (var i = 1; i <= usize; i++) {
                if (this.judgeAllow(i, uHeight)) {
                    return i;
                }
            }
            return 1;
        },
        getClassName: function getClassName() {
            return 'ht.Rack';
        }
    });
    ht.Rack = Rack;

    var util = {
        selectFile: function selectFile(type, readType, callback) {
            var self = this,
                fileDom = document.getElementById('hiddenFile');
            if (!fileDom) {
                fileDom = document.createElement('input');
                fileDom.setAttribute('type', 'file');
                fileDom.setAttribute('id', 'hiddenFile');
                fileDom.style.width = 0;
                fileDom.style.height = 0;

                fileDom.addEventListener('change', function(e) {
                    var file = e.target.files[0];
                    if (!file || type && file.type.indexOf(type) < 0) {
                        callback(null);
                        return;
                    }
                    var reader = new FileReader();
                    reader.onload = function(rd) {
                        callback(file, rd.target.result);
                        // remove dom
                        document.body.removeChild(fileDom);
                    };
                    if (readType === 'text') {
                        reader.readAsText(file);
                    } else {
                        reader.readAsDataURL(file);
                    }
                });

                document.body.appendChild(fileDom);
            }
            fileDom.click();
        }
    };

    var asyncGenerator = function() {
        function AwaitValue(value) {
            this.value = value;
        }

        function AsyncGenerator(gen) {
            var front, back;

            function send(key, arg) {
                return new Promise(function(resolve, reject) {
                    var request = {
                        key: key,
                        arg: arg,
                        resolve: resolve,
                        reject: reject,
                        next: null
                    };

                    if (back) {
                        back = back.next = request;
                    } else {
                        front = back = request;
                        resume(key, arg);
                    }
                });
            }

            function resume(key, arg) {
                try {
                    var result = gen[key](arg);
                    var value = result.value;

                    if (value instanceof AwaitValue) {
                        Promise.resolve(value.value).then(function(arg) {
                            resume("next", arg);
                        }, function(arg) {
                            resume("throw", arg);
                        });
                    } else {
                        settle(result.done ? "return" : "normal", result.value);
                    }
                } catch (err) {
                    settle("throw", err);
                }
            }

            function settle(type, value) {
                switch (type) {
                    case "return":
                        front.resolve({
                            value: value,
                            done: true
                        });
                        break;

                    case "throw":
                        front.reject(value);
                        break;

                    default:
                        front.resolve({
                            value: value,
                            done: false
                        });
                        break;
                }

                front = front.next;

                if (front) {
                    resume(front.key, front.arg);
                } else {
                    back = null;
                }
            }

            this._invoke = send;

            if (typeof gen.return !== "function") {
                this.return = undefined;
            }
        }

        if (typeof Symbol === "function" && Symbol.asyncIterator) {
            AsyncGenerator.prototype[Symbol.asyncIterator] = function() {
                return this;
            };
        }

        AsyncGenerator.prototype.next = function(arg) {
            return this._invoke("next", arg);
        };

        AsyncGenerator.prototype.throw = function(arg) {
            return this._invoke("throw", arg);
        };

        AsyncGenerator.prototype.return = function(arg) {
            return this._invoke("return", arg);
        };

        return {
            wrap: function(fn) {
                return function() {
                    return new AsyncGenerator(fn.apply(this, arguments));
                };
            },
            await: function(value) {
                return new AwaitValue(value);
            }
        };
    }();





    var classCallCheck = function(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    };

    var createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function(Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();







    var get = function get(object, property, receiver) {
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);

        if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);

            if (parent === null) {
                return undefined;
            } else {
                return get(parent, property, receiver);
            }
        } else if ("value" in desc) {
            return desc.value;
        } else {
            var getter = desc.get;

            if (getter === undefined) {
                return undefined;
            }

            return getter.call(receiver);
        }
    };

    var inherits = function(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    };











    var possibleConstructorReturn = function(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    };





    var slicedToArray = function() {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function(arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    var FormPane = function(_ht$widget$FormPane) {
        inherits(FormPane, _ht$widget$FormPane);

        function FormPane() {
            classCallCheck(this, FormPane);

            var _this = possibleConstructorReturn(this, (FormPane.__proto__ || Object.getPrototypeOf(FormPane)).call(this));

            _this._itemIds = [];
            _this._getterMap = {};
            _this._setterMap = {};
            _this._visibleFunc = null;
            return _this;
        }

        createClass(FormPane, [{
            key: 'addRow',
            value: function addRow(items, widths, height) {
                var self = this,
                    map = {};
                for (var i = 0; i < items.length; i++) {
                    if (items[i] && items[i].id) {
                        self._itemIds.push(items[i].id);
                        if (items[i].getter) {
                            self._getterMap[items[i].id] = items[i].getter;
                        }
                        if (items[i].setter) {
                            self._setterMap[items[i].id] = items[i].setter;
                            map[items[i].id] = items[i].setter;
                        }
                    }
                }
                get(FormPane.prototype.__proto__ || Object.getPrototypeOf(FormPane.prototype), 'addRow', this).apply(this, arguments);
                this.addItemListener(map);
            }
        }, {
            key: 'addItemListener',
            value: function addItemListener(map) {
                var self = this,
                    item;

                for (var k in map) {
                    item = self.getItemById(k);
                    if (item.element) {
                        var input = item.element.getElement();
                        if (input.type === 'text' || input.type === 'number') {
                            input.addEventListener('keyup', function(e) {
                                if (e.keyCode === 13) {
                                    map[k](input.value);
                                }
                            });
                            input.addEventListener('blur', function(e) {
                                map[k](input.value);
                            });
                        }
                        if (input.type === 'number') {
                            input.addEventListener('click', function(e) {
                                map[k](input.value);
                            });
                        }
                    }
                }
            }
        }, {
            key: 'getValueObject',
            value: function getValueObject() {
                var self = this,
                    obj = {},
                    item;
                self._itemIds.forEach(function(id) {
                    item = self.getItemById(id);
                    if (item.format) {
                        obj[id] = item.format.apply(item);
                    } else {
                        obj[id] = self.v(id);
                    }
                });
                return obj;
            }
        }, {
            key: 'reset',
            value: function reset(data) {
                var self = this,
                    item;
                self._itemIds.forEach(function(id) {
                    item = self.getItemById(id);
                    if (!item) return;
                    self.v(id, item.defautValue === undefined ? '' : item.defautValue);
                    if (item.__fileData) {
                        item.__fileData = null;
                    }
                });
                self.hideError();
            }
        }, {
            key: 'addFormItems',
            value: function addFormItems(items, widths, height) {
                var _this2 = this;

                items.forEach(function(item) {
                    var _createElement2 = _this2._createElement(item, widths),
                        _createElement3 = slicedToArray(_createElement2, 2),
                        ctrls = _createElement3[0],
                        ws = _createElement3[1];

                    _this2.addRow(ctrls, ws, height);
                });
            }
        }, {
            key: '_createElement',
            value: function _createElement(item, widths) {
                    var self = this,
                        label = {
                            element: item.label,
                            align: 'right'
                        },
                        ctrl = {
                            id: item.id,
                            defautValue: item.value || ''
                        };

                    if (item.file) {
                        var fileWidths = widths.slice(0);
                        fileWidths.push(60);
                        ctrl.textField = {
                            editable: false
                        };
                        ctrl.format = function() {
                            return this.__fileData ? encodeURIComponent(this.__fileData) : '';
                        };
                        this.setCtrlSetterAndGetter(ctrl, item);
                        return [
                            [label, ctrl, {
                                button: {
                                    label: 'select',
                                    onClicked: function onClicked() {
                                        util.selectFile(item.file.type, item.file.readType, function(file, result) {
                                            self.v(item.id, file.name);
                                            self.getItemById(item.id).__fileData = result;
                                            if (item.file.onSelected) {
                                                item.file.onSelected(result);
                                            }
                                        });
                                    }
                                }
                            }], fileWidths
                        ];
                    } else if (item.textField && item.button) {
                        var ws = widths.slice(0);
                        ws.push(item.button.width || height || 32);
                        ctrl.textField = item.textField;
                        return [
                            [label, ctrl, {
                                button: item.button
                            }], ws
                        ];
                    } else {
                        if (item.comboBox) {
                            ctrl.comboBox = item.comboBox;
                        } else if (item.multiComboBox) {
                            ctrl.multiComboBox = item.multiComboBox;
                        } else if (item.slider) {
                            ctrl.slider = item.slider;
                            ctrl.value = item.value;
                        } else if (item.checkBox) {
                            ctrl.checkBox = item.checkBox;
                        } else if (item.element) {
                            ctrl.element = item.element;
                        } else if (item.textField) {
                            ctrl.textField = item.textField;
                        } else {
                            ctrl.textField = {
                                type: item.type || 'text',
                                value: item.value || '',
                                editable: item.editable === undefined ? 'true' : item.editable
                            };
                        }
                        this.setCtrlSetterAndGetter(ctrl, item);
                        return [
                            [label, ctrl], widths
                        ];
                    }
                }
                // tow columns

        }, {
            key: 'addFormItems2',
            value: function addFormItems2(items, widths, height) {
                var _this3 = this;

                var self = this,
                    pc = [],
                    pw = [];
                items.forEach(function(item, i) {
                    var _createElement4 = _this3._createElement(item, widths),
                        _createElement5 = slicedToArray(_createElement4, 2),
                        ctrls = _createElement5[0],
                        ws = _createElement5[1];

                    pc.push.apply(pc, ctrls);
                    pw.push.apply(pw, ws);
                    if (i % 2 === 1 || i === items.length - 1) {
                        _this3.addRow(pc, pw, height);
                        pc = [];
                        pw = [];
                    }
                });
            }
        }, {
            key: 'addFormItemsGeneric',
            value: function addFormItemsGeneric(items, widths, height) {
                var _this4 = this;

                var colCnt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

                var self = this,
                    pc = [],
                    pw = [];
                items.forEach(function(item, i) {
                    var _createElement6 = _this4._createElement(item, widths),
                        _createElement7 = slicedToArray(_createElement6, 2),
                        ctrls = _createElement7[0],
                        ws = _createElement7[1];

                    pc.push.apply(pc, ctrls);
                    pw.push.apply(pw, ws);

                    if (i % colCnt === 2 || i === items.length - 1) {
                        _this4.addRow(pc, pw, height);
                        pc = [];
                        pw = [];
                    }
                });
            }
        }, {
            key: 'setCtrlSetterAndGetter',
            value: function setCtrlSetterAndGetter(ctrl, data) {
                if (data.setter) ctrl.setter = data.setter;
                if (data.getter) ctrl.getter = data.getter;
            }
        }, {
            key: 'refreshData',
            value: function refreshData() {
                var self = this,
                    item;
                setTimeout(function() {
                    for (var k in self._getterMap) {
                        item = self.getItemById(k);
                        if (item.element) {
                            item.element.getElement().value = self._getterMap[k]();
                        }
                    }
                }, 100);
            }
        }, {
            key: 'setValues',
            value: function setValues(valueObj) {
                if (!valueObj) return;
                var self = this;
                self._itemIds.forEach(function(id) {
                    self.v(id, valueObj[id]);
                });
            }
        }, {
            key: 'getLastRow',
            value: function getLastRow() {
                if (this._rows.length > 0) {
                    return this._rows[this._rows.length - 1];
                }
                return null;
            }
        }, {
            key: 'showInfo',
            value: function showInfo(text) {
                var row = this.tipRow;
                row.items[0].element = text;
                row.items[0].color = '#00CC00';
                if (this.getLastRow() !== row) {
                    this._rows.push(row);
                }
                this.iv();
            }
        }, {
            key: 'showError',
            value: function showError(text) {
                var row = this.tipRow;
                row.items[0].element = text;
                row.items[0].color = '#CC0000';
                if (this.getLastRow() !== row) {
                    this._rows.push(row);
                }
                this.iv();
            }
        }, {
            key: 'hideError',
            value: function hideError() {
                if (this.tipRow && this._rows.indexOf(this.tipRow) >= 0) {
                    this.removeRow(this.tipRow);
                }
            }
        }, {
            key: '_selectFile',
            value: function _selectFile(type, readType, callback) {
                var self = this,
                    fileDom = self.__fileDom;
                if (!fileDom) {
                    fileDom = self.__fileDom = document.createElement('input');
                    fileDom.setAttribute('type', 'file');
                    fileDom.style.width = 0;
                    fileDom.style.height = 0;

                    fileDom.addEventListener('change', function(e) {
                        var file = e.target.files[0];
                        if (!file || type && file.type.indexOf(type) < 0) {
                            callback(null);
                            return;
                        }
                        var reader = new FileReader();
                        reader.onload = function(rd) {
                            callback(file, rd.target.result);
                            // remove dom
                            document.body.removeChild(fileDom);
                            self.__fileDom = null;
                        };
                        if (readType === 'text') {
                            reader.readAsText(file);
                        } else {
                            reader.readAsDataURL(file);
                        }
                    });

                    document.body.appendChild(fileDom);
                }
                fileDom.click();
            }
        }, {
            key: 'setVisibleFunc',
            value: function setVisibleFunc(func) {
                this._visibleFunc = func ? func.bind(this) : null;
            }
        }, {
            key: 'addSpaceRow',
            value: function addSpaceRow(height) {
                this.addRow([], [], height || 32);
            }
        }, {
            key: 'getValue',
            value: function getValue(id) {
                var item = this.getItemById(id);
                if (item) {
                    if (item.element instanceof ht.widget.Image) {
                        return item.element.getIcon() || '';
                    } else {
                        return get(FormPane.prototype.__proto__ || Object.getPrototypeOf(FormPane.prototype), 'getValue', this).call(this, id);
                    }
                }
                return '';
            }
        }, {
            key: 'tipRow',
            get: function get$$1() {
                if (!this.__tipRow) {
                    this.addRow([{
                        element: '11',
                        color: 'red',
                        align: 'center',
                        vAlign: 'top'
                    }], [0.1], this.getLastRow().height || 32);

                    this.__tipRow = this.getLastRow();
                }
                return this.__tipRow;
            }
        }]);
        return FormPane;
    }(ht.widget.FormPane);



    var ToolTip = function() {
        function ToolTip(view) {
            classCallCheck(this, ToolTip);

            this.view = view;
            var div = this.div = document.createElement('div');
            div.className = 'ht-toolTip';

            view.getView().addEventListener('mousemove', this.handleMouseMove.bind(this));
        }

        createClass(ToolTip, [{
            key: 'handleMouseMove',
            value: function handleMouseMove(e) {
                var view = this.view;

                var data = view.getDataAt(e);
                if (!ht.Default.isDragging() && data && data.getToolTip) {
                    var toolTip = data.getToolTip();
                    if (toolTip) {
                        this.showToolTip(e, toolTip);
                        return;
                    }
                }
                this.hideToolTip();
            }
        }, {
            key: 'showToolTip',
            value: function showToolTip(e, toolTip) {
                var div = this.div;

                var winInfo = ht.Default.getWindowInfo();
                div.innerHTML = toolTip;
                var rect = div.getBoundingClientRect(),
                    np = {
                        x: e.clientX + 10,
                        y: e.clientY + 10
                    };

                if (np.x + rect.width > winInfo.width) {
                    np.x = winInfo.width - rect.width;
                }
                if (np.y + rect.height > winInfo.height) {
                    np.y = winInfo.height - rect.height;
                }

                div.style.left = np.x + 'px';
                div.style.top = np.y + 'px';
                if (div.parentNode !== document.body) {
                    document.body.appendChild(div);
                }
            }
        }, {
            key: 'hideToolTip',
            value: function hideToolTip() {
                var div = this.div;
                if (div.parentNode === document.body) {
                    document.body.removeChild(div);
                }
            }
        }]);
        return ToolTip;
    }();

    // 设备数据
    var listData = [{ id: 12, name: 'Switch 1', type: 9, uHeight: 1, img: 'http://10.163.228.54:8080/img/s.png' }, { id: 13, name: 'Switch Z11', type: 9, img: 'http://10.163.228.54:8080/img/s.png' }, { id: 14, name: 'Switch Z13', type: 9, uHeight: 2, img: 'http://10.163.228.54:8080/img/s.png' }, { id: 15, name: 'Switch Y13', type: 9, uHeight: 3, img: 'http://10.163.228.54:8080/img/s.png' }];

    var RackBuilder = function() {
        function RackBuilder(main) {
            classCallCheck(this, RackBuilder);

            this.main = main;
            this.init();
        }

        createClass(RackBuilder, [{
            key: "init",
            value: function init() {
                    var self = this,
                        listView = this.listView = new ht.widget.ListView(),
                        listForm = this.listForm = new ht.widget.FormPane(),
                        gv = this.gv = new ht.graph.GraphView(),
                        overview = this.overview = new ht.graph.Overview(gv),
                        listBorder = this.listBorder = new ht.widget.BorderPane(),
                        borderPane = this.borderPane = new ht.widget.BorderPane(),
                        toolbar = this.toolbar = new ht.widget.Toolbar(),
                        splitView = this.splitView = new ht.widget.SplitView(listBorder, borderPane, 'h', 220);
                    listBorder.setTopView(listForm);
                    listBorder.setCenterView(listView);
                    listBorder.setBottomView(overview);
                    listBorder.setTopHeight(32);
                    listBorder.setBottomHeight(150);
                    // 列表下拉过滤
                    listForm.setVPadding(2);
                    listForm.setHPadding(4);
                    listForm.addRow([{
                        comboBox: {
                            labels: ['All', 'Pathch Panel', 'Switch', 'Server', 'Backbone Switch/Router'],
                            values: [-1, 5, 9, 10, 11],
                            value: -1,
                            onValueChanged: function onValueChanged(e) {
                                var val = this.getValue();
                                self.listTypeFilter = val;
                                self.listView.ivm();
                            }
                        }
                    }], [0.1], 28);
                    // 设置列表可见
                    listView.setVisibleFunc(function(data) {
                        if (!self.listTypeFilter || self.listTypeFilter === -1) return true;
                        return data.a('type') === self.listTypeFilter;
                    });
                    // 列表拖拽
                    listView.handleDragAndDrop = this.handleListDND.bind(this);
                    // 初始化gv
                    // gv.setToolTipEnabled(true); 自带tooltip效果不好，使用自定义的
                    this.toolTip = new ToolTip(gv);
                    gv.mi(this.handleGraphInteractor.bind(this));
                    gv.sm().setSelectionMode('single');
                    gv.addViewListener(function(e) {
                        if (e.kind === 'invalidate') {
                            self.toolbar.iv();
                        }
                    });
                    // 右侧画布
                    borderPane.setCenterView(gv);
                    borderPane.setTopView(toolbar);
                    borderPane.setTopHeight(32);
                    this.initToolbar();
                    this.initDialog();

                    var dragHelper = this.dragHelper = new ht.Node();
                    dragHelper.setImage('./symbols/temp.json');
                    dragHelper.setAnchor(0, 0);

                }
                // 处理拖动，移动设备

        }, {
            key: "handleGraphInteractor",
            value: function handleGraphInteractor(e) {
                if (e.kind.indexOf('Move') < 0) return;

                var self = this,
                    listView = self.listView,
                    gv = self.gv,
                    dm = gv.dm(),
                    target = gv.sm().ld(),
                    uHeight = target.a('uHeight') || 1;

                if (e.kind === 'prepareMove') {
                    self._oldPosition = target.p();
                } else if (e.kind === 'betweenMove') {
                    var p = target.p(),
                        targetPoint = {
                            x: p.x + target.getWidth() / 2,
                            y: p.y + 1
                        };

                    self.showDragHelper(targetPoint, uHeight, '#7ED321');
                    dm.sendToTop(target);
                } else if (e.kind === 'endMove') {
                    var p = target.p(),
                        targetPoint = {
                            x: p.x + target.getWidth() / 2,
                            y: p.y + 1
                        };

                    var rack = self.showDragHelper(targetPoint, uHeight, '#7ED321');
                    if (dm.contains(self.dragHelper)) { // 判断容器是否包含该 data 对象
                        var p = target.p();
                        var targetPoint = {
                            x: p.x + target.getWidth() / 2,
                            y: p.y + 1
                        };

                        target.a('uindex', rack.getCellIndex(self.dragHelper.p().y)); // 设置节点的业务属性 uindex

                        target.p(self.dragHelper.p()); // 设置节点的坐标


                        dm.remove(self.dragHelper); // 移除
                        self._savable = true;
                        self.toolbar.iv();
                        target.setHost(rack); // 设置宿主节点
                        target.setParent(rack); // 设置父亲节点
                        // update tree

                        var treeNode = target.a(rack.__treeNode); // 获取拓扑图上对应的树上的节点

                        treeNode.setParent(rack.a(rack.__treeNode));


                        treeData[0].children[0].children.push({ id: 14, name: '交换机11', uHeight: 2, uindex: 10, img: './symbols/carrey icon/机房设备/pane-simple.json' })
                        console.log(treeData, 777)
                        self.reload();

                    } else {
                        target.p(self._oldPosition);
                    }
                }
            }
        }, {
            key: "getView",
            value: function getView() {
                    return this.splitView.getView();
                }
                // iv() {
                //     this.splitView.iv();
                // }

        }, {
            key: "reload",
            value: function reload() {
                var main = this.main,
                    treeNode = main.treeView.sm().ld();
                this.gv.dm().clear();
                this.loadList();
                if (!treeNode) return;

                this.racks = [];
                this.addNodeToGraphView(treeNode);
                this.gv.fitContent();
            }
        }, {
            key: "addNodeToGraphView",
            value: function addNodeToGraphView(data, parent) {
                var self = this,
                    children = data.getChildren(),
                    dm = self.gv.dm(),
                    main = self.main,
                    node;

                if (data.a('type') === TYPE_RACK) {
                    node = self.createRack(data.getAttrObject());
                } else if (parent && parent.a('type') === TYPE_RACK) {
                    var rect = parent.caluCellRect(data.a('uindex'), data.a('uHeight'));
                    node = self.createPane(rect, data.getAttrObject(), parent, data.a('uindex'));
                }
                if (node) {
                    node.a(data.getAttrObject());
                    node.__treeNode = data;
                    dm.add(node);

                    if (parent) {
                        node.setParent(parent);
                        node.setHost(parent);
                    }
                }

                if (children && children.size() > 0) {
                    children.each(function(child) {
                        self.addNodeToGraphView(child, node);
                    });
                }
            }
        }, {
            key: "loadList",
            value: function loadList() {
                var self = this,
                    listView = self.listView,
                    dm = listView.dm();
                dm.clear();
                // TODO available device list from server
                setTimeout(function() {
                    var data = listData;
                    data.forEach(function(d) {
                        var data = new ht.Data();
                        data.setName(d.name);
                        data.a(d);
                        dm.add(data);
                    });
                }, 40);
            }
        }, {
            key: "initToolbar",
            value: function initToolbar() {
                var self = this,
                    toolbar = self.toolbar;
                var toolbarItems = [{
                    icon: self.getToolbarIcon('toolbar.add.rack', function() {
                        var treeNode = self.main.sm.ld();
                        // console.log(treeNode, 77)
                        return treeNode && treeNode.a('type') !== TYPE_RACK;
                    }),
                    toolTip: 'Add a rack',
                    action: function action() {
                        self._editingRack = null;
                        self.addRackForm.reset();
                        self.addRackDialog.show();
                    }
                }, {
                    icon: self.getToolbarIcon('toolbar.edit.rack', function() {
                        var treeNode = self.main.sm.ld();
                        if (treeNode && treeNode.a('type') === TYPE_RACK) {
                            return true;
                        }
                        return self.gv.sm().ld() instanceof Rack;
                    }),
                    toolTip: 'Edit rack info',
                    action: function action() {
                        var ld = self.gv.sm().ld();
                        if (!ld) return;
                        self._editingRack = ld;
                        self.addRackForm.v('name', ld.a('name'));
                        self.addRackForm.v('usize', ld.a('usize'));
                        self.addRackDialog.show();
                    }
                }, {
                    icon: self.getToolbarIcon('toolbar.delete', function() {
                        var treeNode = self.main.sm.ld();
                        if (treeNode && treeNode.a('type') === TYPE_RACK) {
                            return true;
                        }
                        return self.gv.sm().ld() instanceof Rack;
                    }),
                    toolTip: 'Delete a rack',
                    action: function action() {
                        self.handleRemoveRack();
                    }
                }];
                toolbar.setItems(toolbarItems);
                toolbar.setStickToRight(true);
                toolbar.enableToolTip(true);
            }
        }, {
            key: "getToolbarIcon",
            value: function getToolbarIcon(url, stateFunc) {
                    return {
                        width: ICON_SIZE + 6,
                        height: ICON_SIZE + 6,
                        comps: [{
                            type: 'image',
                            name: url,
                            color: {
                                func: function func() {
                                    if (stateFunc) {
                                        var state = stateFunc();
                                        return state ? '#000' : '#ababab';
                                    }
                                    return '#000';
                                }
                            },
                            rect: [3, 3, ICON_SIZE, ICON_SIZE]
                        }]
                    };
                }
                // 初始化 增加|修改机架的弹窗

        }, {
            key: "initDialog",
            value: function initDialog() {
                var self = this,
                    addRackDialog = this.addRackDialog = new ht.widget.Dialog(),
                    addRackForm = this.addRackForm = new FormPane(),
                    labelWidth = 72;

                addRackForm.addRow(['Name', {
                    id: 'name',
                    textField: {}
                }], [labelWidth, 0.1]);

                addRackForm.addRow(['Height(U)', {
                    id: 'usize',
                    textField: {
                        type: 'number'
                    }
                }], [labelWidth, 0.1]);

                addRackDialog.setConfig({
                    title: "New Rack",
                    content: addRackForm,
                    width: 320,
                    height: 220,
                    draggable: true,
                    closable: true,
                    resizeMode: "none",
                    buttons: [{
                        label: "Ok",
                        action: function action(button, e) {
                            var formData = addRackForm.getValueObject(),
                                rack;

                            if (!formData.usize) {
                                formData.usize = 18;
                            }
                            // 最大允许200u
                            formData.usize = Math.min(formData.usize, 200);
                            if (self._editingRack) {
                                console.log(self._editingRack, 111)
                                rack = self._editingRack;
                                rack.a(formData);
                                rack.__treeNode.a(rack.getAttrObject());
                            } else {
                                rack = self.createRack(formData);
                                self.gv.dm().add(rack);
                                // update tree
                                formData.type = TYPE_RACK;
                                console.log(333, 333)
                                var treeNode = self.main.createData(formData, self.main.treeView.sm().ld());
                                rack.__treeNode = treeNode;
                            }
                            self.gv.fitContent(1);
                            addRackDialog.hide();
                        }
                    }, {
                        label: 'Cancel',
                        action: function action() {
                            addRackDialog.hide();
                        }
                    }],
                    buttonsAlign: "right"
                });
            }
        }, {
            key: "createRack",
            value: function createRack(attr) {
                var node = new Rack(attr.usize);
                node.s({
                    '2d.editable': false,
                    '2d.movable': false,
                    'pixelPerfect': false
                });
                node.setAnchor(0, 1);
                node.a(attr);
                var racks = this.racks;

                if (racks.length !== 0) {
                    var lastRack = racks[racks.length - 1],
                        rect = lastRack.getRect();
                    node.p(rect.x + rect.width + RACK_GAP, lastRack.getY());
                }
                racks.push(node);
                return node;
            }
        }, {
            key: "handleListDND",
            value: function handleListDND(e, state) {
                var self = this,
                    listView = self.listView,
                    gv = self.gv,
                    dm = gv.dm(),
                    dnd = self.dnd;

                if (state === 'prepare') {
                    var data = listView.getDataAt(e);
                    listView.sm().ss(data);
                    if (dnd && dnd.parentNode) {
                        document.body.removeChild(dnd);
                    }
                    dnd = self.dnd = ht.Default.createDiv();
                    dnd.style.zIndex = 10;
                    dnd.innerText = data.getName();
                } else if (state === 'begin') {
                    if (dnd) {
                        var pagePoint = ht.Default.getPagePoint(e);
                        dnd.style.left = pagePoint.x - dnd.offsetWidth * 0.5 + 'px';
                        dnd.style.top = pagePoint.y - dnd.offsetHeight * 0.5 + 'px';
                        document.body.appendChild(dnd);
                    }
                } else if (state === 'between') {
                    if (dnd) {
                        var pagePoint = ht.Default.getPagePoint(e);
                        dnd.style.left = pagePoint.x - dnd.offsetWidth * 0.5 + 'px';
                        dnd.style.top = pagePoint.y - dnd.offsetHeight * 0.5 + 'px';
                        self.showDragHelper(e, null, '#7ED321');
                    }
                } else {
                    if (ht.Default.containedInView(e, self.gv)) {
                        if (dm.contains(self.dragHelper)) {
                            var rect = self.dragHelper.getRect(),
                                target = self.showDragHelper(e, null, '#7ED321'),
                                node,
                                ld = self.listView.sm().ld(),
                                uindex = target.getCellIndex(rect.y, ld.a('uHeight') || 1);
                            node = self.createPane(rect, ld.getAttrObject(), target, uindex);
                            dm.add(node);
                            // update tree data
                            var treeNode = self.main.createData(ld.getAttrObject(), target.__treeNode);
                            treeNode.a('uindex', uindex);
                            // console.log(uindex);
                            node.__treeNode = treeNode;
                            // console.log(treeNode, treeData, 777)
                            console.log(treeNode._parent._attrObject)
                            dm.remove(self.dragHelper);
                        }
                    }
                    document.body.removeChild(dnd);
                    self.dnd = null;
                }
            }
        }, {
            key: "showDragHelper",
            value: function showDragHelper(e, uHeight, color) {
                var self = this,
                    dm = self.gv.dm(),
                    lp = e.clientX !== undefined || e.offsetX !== undefined ? self.gv.lp(e) : e,
                    ld = self.listView.sm().ld(),
                    racks = self.racks,
                    rect = null,
                    targetRack = null;

                if (racks.length === 0) return;
                self.dragHelper.s({
                    'body.color': color,
                    'opacity': 0.5
                });
                for (var i = 0; i < racks.length; i++) {
                    rect = racks[i].getCellRect(lp, uHeight || ld.a('uHeight'));
                    if (rect) {
                        targetRack = racks[i];
                        break;
                    }
                }

                if (rect) {
                    if (!dm.contains(self.dragHelper)) {
                        dm.add(self.dragHelper);
                    }
                    self.dragHelper.p(rect);
                    self.dragHelper.setSize(rect.width, rect.height);
                }

                if (!rect && dm.contains(self.dragHelper)) {
                    dm.remove(self.dragHelper);
                }
                return targetRack;
            }
        }, {
            key: "createPane",
            value: function createPane(rect, attr, parent, uindex) {
                var node = new ht.Node();
                node.setAnchor(0, 0);
                node.setSize(rect.width, rect.height);
                node.p(rect);
                node.a(attr);
                node.a('uindex', uindex);

                node.setImage(attr.img || './imgs/pane.png');
                node.setHost(parent);
                node.setParent(parent);
                this.setPaneTooltip(node);
                // this.gv.dm().add(node);
                return node;
            }
        }, {
            key: "setPaneTooltip",
            value: function setPaneTooltip(node) {
                var attr = node.getAttrObject();
                node.setToolTip("\n            <div>\n            <p>\u540D\u79F0\uFF1A" + attr.name + "</p>\n            <p>\u5360\u7528\uFF1A" + (attr.uHeight || 1) + "</p>\n            <p>\u4F4D\u7F6E\uFF1A" + attr.uindex + "</p>\n            </div>\n            ");
            }
        }, {
            key: "handleRemoveRack",
            value: function handleRemoveRack() {
                var ld = this.gv.sm().ld(),
                    treeNode = this.main.sm.ld(),
                    rack = void 0;
                if (treeNode.a('type') === TYPE_RACK) {
                    rack = this.racks[0];
                } else if (ld && ld instanceof Rack) {
                    rack = ld;
                }
                if (rack) {
                    if (confirm("\u60A8\u786E\u5B9A\u8981\u5220\u9664\u673A\u67B6[" + rack.a('name') + "]")) {
                        this.main.treeView.dm().remove(rack.__treeNode);
                        this.gv.dm().remove(rack);
                    }
                    return;
                }
            }
        }]);
        return RackBuilder;
    }();



    var Main = function() {
        function Main() {
            classCallCheck(this, Main);

            this.formMap = {};
            this.initUI();
            this.loadTreeData();
        }

        createClass(Main, [{
            key: 'initUI',
            value: function initUI() {
                var _this = this;

                var treeView = this.treeView = new ht.widget.TreeView(),
                    splitView = this.splitView = new ht.widget.SplitView(treeView, null, 'h', 280);
                // contextMenu = this.contextMenu = new ht.widget.ContextMenu();

                treeView.sm().setSelectionMode('single');
                treeView.getIcon = function(data) {
                    var type = data.a('type');
                    if ([TYPE_SITE, TYPE_BUILDING, TYPE_FLOOR, TYPE_AREA, TYPE_RACK_SPACE, TYPE_RACK].indexOf(type) >= 0) {
                        return 'tree.icon' + type;
                    }
                    return 'tree.icon';
                };
                treeView.sm().ms(function() {
                    var ld = treeView.sm().ld();
                    if (ld) {
                        _this.updateForm(ld.a('type'));
                    } else {
                        _this.splitView.setRightView(null);
                    }
                });

                splitView.addToDOM();
            }
        }, {
            key: 'createData',
            value: function createData(data, parent) {
                var self = this,
                    htData = new ht.Data(),
                    dm = this.treeView.dm();
                htData.a(data);
                htData.setName(data.name);
                if (parent) {
                    htData.setParent(parent);
                }
                dm.add(htData);
                if (data.children) {
                    data.children.forEach(function(d) {
                        self.createData(d, htData);
                    });
                }
                return htData;
            }
        }, {
            key: 'loadTreeData',
            value: function loadTreeData() {
                var self = this;

                // 模拟接口异步
                setTimeout(function() {
                    var data = treeData;

                    data.forEach(function(d) {
                        self.createData(d);
                    });
                    self.treeView.expandAll();
                    // 默认选择第一条
                    self.treeView.sm().ss(self.treeView.dm().toDatas().get(0));
                }, 10);
            }
        }, {
            key: 'updateForm',
            value: function updateForm(type) {
                var self = this,
                    formType = 'form' + type,
                    form = this.formMap[formType],
                    ld = this.treeView.sm().ld();
                if (type === TYPE_RACK_SPACE || type === TYPE_RACK) {
                    if (!this.rackBuild) {
                        this.rackBuild = new RackBuilder(this);
                    }
                    if (type === TYPE_RACK) {
                        ld = ld.getParent();
                    }
                    this.rackBuild.reload();
                    this.splitView.setRightView(this.rackBuild.splitView);
                } else {
                    this.splitView.setRightView(null);
                }
            }
        }, {
            key: 'sm',
            get: function get$$1() {
                return this.treeView.sm();
            }
        }]);
        return Main;
    }();

    var main$1 = new Main();

    return main$1;

})));